/*
 * Copyright (c) 2004 Auster Solutions. All Rights Reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Created on Feb 28, 2005
 */
package br.com.auster.facelift.requests.web.model;

import java.io.Serializable;
import java.sql.Timestamp;

/**
 * Represents a file generated to group a list of files generated by the processing requests of a single web request. Or, 
 * 	it is some file generated with information related to the web request itself. These files can have a message to indicate
 *  what its contents are about.  
 * 
 * @hibernate.class
 *          table="WEB_BUNDLEFILE"
 *              
 * @author framos
 * @version $Id$
 */
public class BundleFile implements Serializable, Comparable  {

    
    // -------------------------
    // Instance variables 
    // -------------------------

    private long fileId;
    private WebRequest request;
    private String filename;
    private int consequencesCount;
    private Timestamp fileDatetime;
    private String message;
    
    
    
    // -------------------------
    // Public methods 
    // -------------------------

    /**
     * @hibernate.id
     *          column="FILE_ID"
     *          type="long"
     *          not-null="true"
     *          unsaved-value="0"
     *          generator-class="sequence"
     *
     * @hibernate.generator-param
     *          name="sequence"
     *          value="bundlefile_sequence"          
     */
    public final long getFileId() {
        return fileId;
    }
    
    public final void setFileId(long _id) {
        fileId = _id;
    }
    
    /**
     * @hibernate.many-to-one
     *          column="WEB_REQUEST_ID"
     *          not-null="true"         
     */
    public final WebRequest getRequest() {
        return request;
    }

    public final void setRequest(WebRequest _request) {
        request = _request;
    }

    /**
     * @hibernate.property
     *          column="FILENAME"
     *          type="string"
     *          length="512"
     *          not-null="true"
     */
    public final String getFilename() {
        return filename;
    }

    public final void setFilename(String _name) {
        filename = _name;
    }
    
    /**
     * @hibernate.property
     *          column="CREATE_DATETIME"
     *          type="timestamp"
     *          not-null="true"
     */
    public final Timestamp getFileDatetime() {
        return this.fileDatetime;
    }
    
    public final void setFileDatetime(Timestamp _datetime) {
        this.fileDatetime = _datetime;
    }
    
    /**
     * @hibernate.property
     *          column="MESSAGE"
     *          type="string"
     *          length="512"
     *          not-null="false"
     */
    public final String getMessage() {
        return this.message;
    }
    
    public final void setMessage(String _message) {
        this.message = _message;
    }    
    
    
    // -------------------------
    // Comparable overwrites 
    // -------------------------

    public int compareTo(Object _other) {
        try {
            BundleFile other = (BundleFile) _other;
            if ((this.getRequest() == null) ^ (other.getRequest() == null)) {
                return 0;
            } else if (this.getRequest() != null) {
                int compare = this.getRequest().compareTo(other.getRequest());
                if (compare != 0) {
                    return compare;
                }
            }
            
            if ((this.getFilename() == null) ^ (other.getFilename() == null)) {
                return 0;
            } else if (this.getFilename() != null) {
                return this.getFilename().compareTo(other.getFilename());
            } 
            return 0;
            
        } catch (ClassCastException cce) {
            // TODO log as error
            return 0;
        } catch (NullPointerException npe) {
            // TODO log as error
            return 0;
        }
    }
    

    
    // -------------------------
    // Object overwrites 
    // -------------------------
    
    public int hashCode() {
        int result = 17;
        result = 37*result + (this.getRequest() != null ? this.getRequest().hashCode() : 0);
        result = 37*result + (this.getFilename() != null ? this.getFilename().hashCode() : 0);
        return result;        
    }

    public boolean equals(Object _other) {
        try {
            BundleFile other = (BundleFile) _other;
            if ((this.getRequest() == null) ^ (other.getRequest() == null)) {
                return false;
            } else if (this.getRequest() != null) {
                if (! this.getRequest().equals(other.getRequest()) ) {
                    return false;
                }
            }
            
            if ((this.getFilename() == null) ^ (other.getFilename() == null)) {
                return false;
            } else if (this.getFilename() != null) {
                return this.getFilename().equals(other.getFilename());
            } 
            return false;
            
        } catch (ClassCastException cce) {
            // TODO log as error
            return false;
        } catch (NullPointerException npe) {
            // TODO log as error
            return false;
        }
    }
    
    public String toString() {
        return "[" + getClass().getName() + " : " +
        	   " filename=" + getFilename() +
        	   " count =" + getConsequencesCount() +
               " datetime=" + getFileDatetime() +
               " message=" + getMessage() +
               "]";
    }

	/**
	 * Return the value of a attribute<code>consequencesCout</code>.
	 * @return return the value of <code>consequencesCout</code>.
	 */
	public int getConsequencesCount() {
		return consequencesCount;
	}

	/**
	 * Set a value of <code>consequencesCout</code>.
	 * @param consequencesCout
	 */
	public void setConsequencesCount(int consequencesCount) {
		this.consequencesCount = consequencesCount;
	}
    

}
