/*
 * Copyright (c) 2004 Auster Solutions. All Rights Reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Created on Apr 5, 2005
 */
package br.com.auster.facelift.requests.web.model;



import java.io.Serializable;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import br.com.auster.facelift.requests.model.Request;


/**
 * Represents a request in the web portal scope. It holds a list of processing requests, some 
 *  status information, notification emails, a list of files created to bundle the ones generated by
 *  each processing request and a group of properties, in a key-value format, that holds business
 *  information about this web request. 
 *  
 * @hibernate.class
 *          table="WEB_REQUEST"
 *          
 * @hibernate.query
 *          name="procrequests.filtered.webrequest"
 *          query="select  procRequests 
 *                 from    WebRequest as web
 *                 inner   join web.processingRequests as procRequests
 *                 where   web.requestId = ? "
 *                         
 * @hibernate.query
 *          name="procrequests.count.webrequest"
 *          query="select  count(procRequests) 
 *                 from    WebRequest as web
 *                 inner   join web.processingRequests as procRequests
 *                 inner   join procRequests.trails    as trails
 *                 where   web.requestId = ? "
 *          
 * @hibernate.query
 *          name="procrequests.countByStatus.webrequest"
 *          query="select   trails.status, count(trails) 
 *                 from     WebRequest as web
 *                 inner    join web.processingRequests as procRequests
 *                 inner    join procRequests.trails    as trails
 *                 where    web.requestId = ? 
 *                 group by trails.status"
 *                 
 * @hibernate.query
 *          name="count.webrequest"
 *          query="select  count(web)
 *                 from    WebRequest as web"
 *                                           
 * @hibernate.query
 *          name="procrequests.findby.webrequest"
 *          query="select  web 
 *                 from    WebRequest as web
 *                 inner   join web.processingRequests as procRequests
 *                 where   procRequests.requestId = ?"
 *                         
 *                           
 * @author framos
 * @version $Id$
 */
public class WebRequest implements Serializable, Comparable {

    
    
    // -------------------------
    // Instance variables
    // -------------------------    
    
    private long requestId;
    
    private Map additionalInfo;
    private Set  procRequests;
    private Set notificationSet;
    
    // alterando o tipo de coleção para manter a ordem de incerção
    private List bundleFiles;
    
    private int status;
    private long ownerId;
    
    private Timestamp startDate;
    private Timestamp endDate;
    
    private Map counters;

    private List consequenceCounters;
    
    private Set inputFiles;
    private Map formats;

    // -------------------------
    // Constructors
    // -------------------------
    
    public WebRequest() {
        this(0);
    }
    
    public WebRequest(long _id) {
        setRequestId(_id);
        counters = new HashMap();
    }
    
    
    
    // -------------------------
    // Public methods
    // -------------------------
    
    
    /**
     * @hibernate.id
     *          column="REQUEST_ID"
     *          type="long"
     *          not-null="true"
     *          unsaved-value="0"
     *          generator-class="sequence"
     *          
     * @hibernate.generator-param
     *          name="sequence"
     *          value="web_request_sequence"          
     */
    public final long getRequestId() {
        return requestId;
    }

    public final void setRequestId(long requestId) {
        this.requestId = requestId;
    }
    
    /**
     * @hibernate.set
     *          cascade="all-delete-orphan"
     *          inverse="false"
     *          lazy="true"
     *          table="WEB_REQUEST_REQUESTS"
     *          
     * @hibernate.collection-key
     *          column="WEB_REQUEST_ID"
     *          
     * @hibernate.collection-many-to-many
     *          column="PROC_REQUEST_ID"
     *          class="br.com.auster.facelift.requests.model.Request"                              
     */
    public final Set getProcessingRequests() {
        return procRequests;
    }

    public final void setProcessingRequests(Set _requests) {
        this.procRequests = _requests;
    }
    
    /**
     * @hibernate.set
     *          cascade="all-delete-orphan"
     *          inverse="false"
     *          lazy="false"
     *          
     * @hibernate.collection-key
     *          column="WEB_REQUEST_ID"
     *          
     * @hibernate.collection-one-to-many
     *          class="br.com.auster.facelift.requests.web.model.NotificationEmail"                              
     */
    public final Set getNotifications() {
        return notificationSet;
    }

    public final void setNotifications(Set _notifications) {
        this.notificationSet = _notifications;
    }    

    /**
     * @hibernate.set
     *          cascade="all-delete-orphan"
     *          inverse="false"
     *          lazy="false"
     *          
     * @hibernate.collection-key
     *          column="WEB_REQUEST_ID"
     *          
     * @hibernate.collection-one-to-many
     *          class="br.com.auster.facelift.requests.web.model.BundleFile"                              
     */
    public final List getBundleFiles() {
        return bundleFiles;
    }

    public final void setBundleFiles(List _bundleFiles) {
        this.bundleFiles = _bundleFiles;
    }    
    
    /**
     * @hibernate.property
     *          column="END_DATE"
     *          type="timestamp"
     *          not-null="false"
     */
    public final Timestamp getEndDate() {
        return endDate;
    }
    
    public final void setEndDate(Timestamp endDate) {
        this.endDate = endDate;
    }
    

    /**
     * @hibernate.property
     *          column="OWNER_ID"
     *          type="long"
     *          not-null="false"
     */
    public final long getOwnerId() {
        return ownerId;
    }
    
    public final void setOwnerId(long ownerId) {
        this.ownerId = ownerId;
    }
    

    /**
     * @hibernate.property
     *          column="START_DATE"
     *          type="timestamp"
     *          not-null="true"
     */
    public final Timestamp getStartDate() {
        return startDate;
    }

    public final void setStartDate(Timestamp startDate) {
        this.startDate = startDate;
    }
    

    /**
     * @hibernate.property
     *          column="REQUEST_STATUS"
     *          type="integer"
     *          not-null="true"
     */
    public final int getStatus() {
        return status;
    }

    public final void setStatus(int status) {
        this.status = status;
    }

	/**
     * @hibernate.map
     *          table="WEB_REQUEST_INFO"
     *          cascade="delete-orphan"
     *          inverse="false"
     *          
     * @hibernate.collection-key
     *          column="WEB_REQUEST_ID"
     *          
     * @hibernate.collection-index
     *          column="INFO_KEY"
     *          type="string"
     *          length="64"
     *          
     * @hibernate.collection-element
     *          column="INFO_VALUE"
     *          type="string"
     *          length="256"
     *          not-null="false"                              
     */    
    public final Map getAdditionalInformation() {
        return additionalInfo;
    }

    public final void setAdditionalInformation(Map _additionalInfo) {
        additionalInfo = _additionalInfo;
    }
    
    /**
     * Counters are added at load time, for each web request and are NOT stored
     *  as persistence data.
     *  
     * @param _map the map of counters, by status
     */
    public final void setCounters(Map _map) {
        counters = _map;
    }

    /**
     * Counters are added at load time, for each web request and are NOT stored
     *  as persistence data.
     * 
     * @return the map of counters, by status
     */
    public final Map getCounters() {
        return counters;
    }
    
    /**
     * Adds the <code>_counter</code> amount to the current counter for a specific status, or if the
     *  status is not yet counted for this web request, than it is initialized with this amount.
     *  
     * @param _status the status to look for
     * @param _counter the amount to add/set for the status
     */
    public final void addCounterForStatus(int _status, int _counter) {
        int actValue = getCounterForStatus(_status);
        counters.put(String.valueOf(_status), Integer.valueOf(actValue + _counter));
    }

    /**
     * Returns the actual counter for a specific status, or <code>0</code> if there is no
     *  counter for it.
     *   
     * @param _status the status to look for
     * @return the counter for the status; 0 if the counter was not found
     */
    public final int getCounterForStatus(int _status) {
        return (counters.containsKey(String.valueOf(_status)) ? 
                     ((Integer)counters.get(String.valueOf(_status))).intValue() : 
                      0 );
    }

	
    public final void setConsequenceCounters(List counters) {
    	this.consequenceCounters=counters;
    }
    
    public final List getConsequenceCounters() {
    	return this.consequenceCounters;
    }

	/**
	 * Returns the set of <code>inputFiles</code>.
	 * @return set of <code>inputFiles</code>.
	 */
	public Set getInputFiles() {
		return inputFiles;
	}

	/**
	 * Sets the <code>inputFiles</code>.
	 * @param inputFiles
	 */
	public void setInputFiles(Set inputFiles) {
		this.inputFiles = inputFiles;
	}

    /**
	 * Return the value of a attribute<code>formats</code>.
	 * @return return the value of <code>formats</code>.
	 */
	public Map getFormats() {
		return formats;
	}

	/**
	 * Set a value of <code>formats</code>.
	 * @param formats
	 */
	public void setFormats(Map formats) {
		this.formats = formats;
	}

    // -------------------------
    // Object overwrites
    // -------------------------

	public boolean equals(Object _other) {
        try {
            return (((WebRequest)_other).getRequestId() == this.getRequestId()  &&
                    (this.getRequestId() != 0));
        } catch (ClassCastException cce) {
            return false;
        } catch (NullPointerException npe) {
            return false;
        }
    }
    
    public int hashCode() {
        int result = 17;
        result = 37*result + (int) this.getRequestId();
        return result;
    }
    
    public String toString() {
        return "[" + getClass().getName() + " : " +
               " id=" + getRequestId() +
			   " addInfo=" + getAdditionalInformation() +
               " start=" + getStartDate() + 
               " end=" + getEndDate() +
               " status=" + getStatus() +
               " owner=" + getOwnerId() +
               " notifications=" + getNotifications() +
               "]";
    }
    

    
    // -------------------------
    // Comparable overwrites
    // -------------------------
        
    public int compareTo(Object _other) {
        try {
            return (int) (this.getRequestId() - ((Request) _other).getRequestId());
        } catch (ClassCastException cce) {
            return 0;
        } catch (NullPointerException npe) {
            return 0;
        }
    }    
    
}
